{"version":3,"sources":["components/ClickAlert/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/ClickyGame/index.js","App.js","serviceWorker.js","index.js"],"names":["ClickAlert","state","alert","animating","renderAlert","prevState","score","topScore","newState","this","props","setState","className","onAnimationEnd","Component","Nav","href","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","image","shake","ClickyGame","clickee","handleFirstClick","newClickee","newScore","newTopScore","Math","max","shuffle","handleSecondClick","restart","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","key","process","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0bc6295.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass ClickAlert extends Component {\n  state = {\n    alert: \"\",\n    animating: false\n  };\n\n  componentDidUpdate({ score, topScore }, prevState) {\n    const newState = { animating: true };\n\n    if (score === 0 && topScore === 0) {\n      newState.alert = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.alert = \"incorrect\";\n    } else {\n      newState.alert = \"correct\";\n    }\n\n    if (score !== this.props.score || this.state.alert !== newState.alert) {\n      this.setState(newState);\n    }\n  }\n\n  renderAlert = () => {\n    switch (this.state.alert) {\n    case \"correct\":\n      return \"You caught'em!\";\n    case \"incorrect\":\n      return \"Sorry, that's the second time!\";\n    default:\n      return \"Click/catch a pokemon to begin!\";\n    }\n  };\n\n  render() {\n    return (\n      <li\n        className={this.state.animating ? this.state.alert : \"\"}\n        onAnimationEnd={() => this.setState({ animating: false })}\n      >\n        {this.renderAlert()}\n      </li>\n    );\n  }\n}\n\nexport default ClickAlert;\n","import React from \"react\";\nimport ClickAlert from \"../ClickAlert\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <h1>\n        <ul>\n          <li className=\"brand\">\n            <a href=\"/nmikeytruong.github.io/clicky-game/\">Clicky PokeGame/Restart</a>\n          </li>\n          <ClickAlert score={props.score} topScore={props.topScore} />\n          <li>\n            Score: {props.score} | Top Score: {props.topScore}\n          </li>\n        </ul>\n      </h1>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Clicky PokeGame!</h1>\n      <h2>Click on a pokemon to catch them and earn points, but don't click/catch any pokemon more than once!</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default ClickItem;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\nimport clickee from \"../../clickee.json\";\n\nclass ClickyGame extends Component {\n  state = {\n    clickee,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ clickee: this.shuffle(this.state.clickee) });\n  }\n\n  handleFirstClick = newClickee => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      clickee: this.shuffle(newClickee),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleSecondClick = clickee => {\n    this.setState({\n      clickee: this.restart(clickee),\n      score: 0\n    });\n  };\n\n  restart = clickee => {\n    const restart = clickee.map(item => ({ ...item, clicked: false }));\n    return this.shuffle(restart);\n  };\n\n  shuffle = clickee => {\n    let i = clickee.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = clickee[i];\n      clickee[i] = clickee[j];\n      clickee[j] = temp;\n      i--;\n    }\n    return clickee;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newClickee = this.state.clickee.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleFirstClick(newClickee)\n      : this.handleSecondClick(newClickee);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.clickee.map(item => (\n            <ClickItem\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleItemClick}\n              image={process.env.PUBLIC_URL + item.image}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from \"react\";\nimport ClickyGame from \"./components/ClickyGame\";\n\nfunction App() {\n  return <ClickyGame />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}